"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = __importDefault(require("typescript"));
var LANGS = ['ts', 'typescript'];
function importTransformer() {
    return function (context) {
        var visit = function (node) {
            if (typescript_1.default.isImportDeclaration(node)) {
                var text = node.moduleSpecifier.getText().slice(0, -1);
                if (text.endsWith('.svelte')) {
                    // console.log('------- svelte import -----')
                    // console.log(node.getFullText().trim())
                    return typescript_1.default.createImportDeclaration(node.decorators, node.modifiers, node.importClause, node.moduleSpecifier);
                }
            }
            return typescript_1.default.visitEachChild(node, function (child) { return visit(child); }, context);
        };
        return function (node) { return typescript_1.default.visitNode(node, visit); };
    };
}
function isSvelteImport(d) {
    return (d.code === 2307 && typeof d.messageText === 'string' && /\.svelte['"]\.$/.test(d.messageText));
}
function clearDiagnostics(diagnostics) {
    return diagnostics.filter(function (d) { return !isSvelteImport(d); });
}
function createFormatDiagnosticsHost(cwd) {
    return {
        getCanonicalFileName: function (fileName) { return fileName; },
        getCurrentDirectory: function () { return cwd; },
        getNewLine: function () { return typescript_1.default.sys.newLine; }
    };
}
function createProxyHost(host, file) {
    var proxy = {
        getSourceFile: function (fileName, languageVersion, _onError) {
            return fileName === file.name
                ? typescript_1.default.createSourceFile(file.name, file.content, languageVersion)
                : host.getSourceFile(fileName, languageVersion, _onError);
        },
        writeFile: function (_fileName, _content) {
            throw new Error('unsupported');
        },
        getCanonicalFileName: function (fileName) {
            return fileName === file.name
                ? typescript_1.default.sys.useCaseSensitiveFileNames
                    ? fileName
                    : fileName.toLowerCase()
                : host.getCanonicalFileName(fileName);
        },
        fileExists: function (fileName) { return (fileName === file.name ? true : host.fileExists(fileName)); },
        readFile: function (fileName) { return (fileName === file.name ? file.content : host.readFile(fileName)); },
        getDefaultLibFileName: host.getDefaultLibFileName.bind(host),
        getCurrentDirectory: host.getCurrentDirectory.bind(host),
        getNewLine: host.getNewLine.bind(host),
        useCaseSensitiveFileNames: host.useCaseSensitiveFileNames.bind(host),
        resolveModuleNames: host.resolveModuleNames && host.resolveModuleNames.bind(host),
        getDirectories: host.getDirectories && host.getDirectories.bind(host)
    };
    return proxy;
}
exports.defaultCompilerOptions = {
    target: typescript_1.default.ScriptTarget.ESNext,
    module: typescript_1.default.ModuleKind.ESNext,
    moduleResolution: typescript_1.default.ModuleResolutionKind.NodeJs,
    allowNonTsExtensions: true,
    alwaysStrict: false
};
function createEnv(basePath) {
    basePath = basePath ? basePath : process.cwd();
    var formatDiagnosticHost = createFormatDiagnosticsHost(basePath);
    return { basePath: basePath, formatDiagnosticHost: formatDiagnosticHost };
}
exports.createEnv = createEnv;
function readConfigFile(env, path) {
    var configPath = path ? path : typescript_1.default.findConfigFile(env.basePath, typescript_1.default.sys.fileExists);
    if (!configPath) {
        throw new Error("Could not find a valid 'tsconfig.json'.");
    }
    // read config
    var result = typescript_1.default.readConfigFile(configPath, typescript_1.default.sys.readFile);
    if (result.error) {
        var msg = typescript_1.default.formatDiagnostics([result.error], env.formatDiagnosticHost);
        throw new Error(msg);
    }
    var config = result.config;
    var settings = typescript_1.default.convertCompilerOptionsFromJson(config.compilerOptions, env.basePath);
    if (!settings.options) {
        var msg = typescript_1.default.formatDiagnostics(settings.errors, env.formatDiagnosticHost);
        throw new Error(msg);
    }
    return settings.options;
}
exports.readConfigFile = readConfigFile;
function createPreprocessOptions(opts) {
    opts = opts ? opts : {};
    return {
        compilerOptions: opts.compilerOptions ? opts.compilerOptions : exports.defaultCompilerOptions,
        env: opts.env ? opts.env : createEnv()
    };
}
exports.createPreprocessOptions = createPreprocessOptions;
function preprocess(opts) {
    function script(_a) {
        var content = _a.content, attributes = _a.attributes, filename = _a.filename;
        if (!attributes.lang) {
            return;
        }
        var lang = attributes.lang.toLowerCase();
        if (!LANGS.includes(lang)) {
            return;
        }
        filename = typescript_1.default.sys.resolvePath(filename);
        var options = createPreprocessOptions(opts);
        var rootFiles = [filename];
        var proxyHost = createProxyHost(typescript_1.default.createCompilerHost(options.compilerOptions), {
            name: filename,
            content: content
        });
        var code = '';
        var writeFile = function (fileName, data) {
            // console.log(fileName)
            // console.log(data)
            if (fileName.endsWith('.js')) {
                code = data;
            }
        };
        var customTransformers = {
            before: [importTransformer()]
        };
        var program = typescript_1.default.createProgram(rootFiles, options.compilerOptions, proxyHost);
        program.emit(undefined, writeFile, undefined, undefined, customTransformers);
        var diagnostics = clearDiagnostics(typescript_1.default.getPreEmitDiagnostics(program));
        if (diagnostics.length) {
            var s = typescript_1.default.formatDiagnosticsWithColorAndContext(diagnostics, options.env.formatDiagnosticHost);
            console.log(s);
        }
        return { code: code };
    }
    return { script: script };
}
exports.preprocess = preprocess;
//# sourceMappingURL=svelte-ts-preprocess.js.map